
# Instructions for Replit: Restructuring Body Analysis Workflow

## Overview of Changes
1. Move all photo upload functionality to the Home page only
2. Convert Body Analysis page to show results (not collection form)
3. Update navigation flow between pages
4. Ensure proper data passing between upload and analysis

## Step 1: Update Home Page Template

Edit `MyGeneticsApp/templates/tailwind_home.html`:

```html
<!-- Modify the form to include all necessary input fields and submit to analysis route -->
<form id="analysisForm" action="{{ url_for('analyze') }}" method="post" enctype="multipart/form-data" class="space-y-6">
    <!-- Personal Information Section -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
            <label for="height" class="block text-sm font-medium text-gray-700">Height</label>
            <div class="mt-1 relative rounded-md shadow-sm">
                <input type="number" step="0.1" name="height" id="height" required
                       class="focus:ring-blue-500 focus:border-blue-500 block w-full rounded-md border-gray-300">
                <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <span class="text-gray-500 sm:text-sm height-unit">cm</span>
                </div>
            </div>
        </div>
        
        <div>
            <label for="weight" class="block text-sm font-medium text-gray-700">Weight</label>
            <div class="mt-1 relative rounded-md shadow-sm">
                <input type="number" step="0.1" name="weight" id="weight" required
                       class="focus:ring-blue-500 focus:border-blue-500 block w-full rounded-md border-gray-300">
                <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <span class="text-gray-500 sm:text-sm weight-unit">kg</span>
                </div>
            </div>
        </div>
        
        <div>
            <label for="gender" class="block text-sm font-medium text-gray-700">Gender</label>
            <select name="gender" id="gender" required
                    class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                <option value="male">Male</option>
                <option value="female">Female</option>
            </select>
        </div>
        
        <div>
            <label for="experience" class="block text-sm font-medium text-gray-700">Experience Level</label>
            <select name="experience" id="experience"
                    class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                <option value="beginner">Beginner (0-2 years)</option>
                <option value="intermediate">Intermediate (2-5 years)</option>
                <option value="advanced">Advanced (5+ years)</option>
            </select>
        </div>
        
        <div class="md:col-span-2">
            <fieldset>
                <legend class="block text-sm font-medium text-gray-700">Measurement System</legend>
                <div class="mt-2 flex space-x-6">
                    <div class="flex items-center">
                        <input id="metric" name="measurement_system" type="radio" value="metric" checked
                               class="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300">
                        <label for="metric" class="ml-2 block text-sm text-gray-700">Metric (cm/kg)</label>
                    </div>
                    <div class="flex items-center">
                        <input id="imperial" name="measurement_system" type="radio" value="imperial"
                               class="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300">
                        <label for="imperial" class="ml-2 block text-sm text-gray-700">Imperial (in/lbs)</label>
                    </div>
                </div>
            </fieldset>
        </div>
    </div>
    
    <!-- Photo Upload Section -->
    <div class="mt-8">
        <h3 class="text-lg font-medium leading-6 text-gray-900">Upload Your Photo</h3>
        <div class="mt-2">
            <p class="text-sm text-gray-500">For best analysis results:</p>
            <ul class="list-disc ml-5 text-sm text-gray-500">
                <li>Wear form-fitting clothing or activewear</li>
                <li>Stand in a neutral pose, arms at sides, legs shoulder-width apart</li>
                <li>Ensure good lighting and a plain background</li>
                <li>Face the camera directly with your entire body visible</li>
            </ul>
        </div>
        
        <div class="mt-4">
            <div class="flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
                <div class="space-y-1 text-center">
                    <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                        <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                    <div class="flex text-sm text-gray-600">
                        <label for="image" class="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500">
                            <span>Upload a photo</span>
                            <input id="image" name="image" type="file" accept="image/*" class="sr-only" required>
                        </label>
                        <p class="pl-1">or drag and drop</p>
                    </div>
                    <p class="text-xs text-gray-500">PNG, JPG, GIF up to 10MB</p>
                    <div id="preview-container" class="hidden mt-4">
                        <img id="preview-image" class="max-h-64 mx-auto" src="#" alt="Your uploaded image">
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="flex justify-center">
        <button type="submit" class="px-8 py-3 text-white bg-blue-600 hover:bg-blue-700 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
            Analyze My Genetics
        </button>
    </div>
</form>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Image preview functionality
        const imageInput = document.getElementById('image');
        const previewContainer = document.getElementById('preview-container');
        const previewImage = document.getElementById('preview-image');
        
        imageInput.addEventListener('change', function() {
            const file = this.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    previewImage.src = e.target.result;
                    previewContainer.classList.remove('hidden');
                }
                reader.readAsDataURL(file);
            }
        });
        
        // Unit conversion for measurement system
        const metricRadio = document.getElementById('metric');
        const imperialRadio = document.getElementById('imperial');
        const heightUnit = document.querySelector('.height-unit');
        const weightUnit = document.querySelector('.weight-unit');
        
        function updateUnits() {
            if (metricRadio.checked) {
                heightUnit.textContent = 'cm';
                weightUnit.textContent = 'kg';
            } else {
                heightUnit.textContent = 'in';
                weightUnit.textContent = 'lbs';
            }
        }
        
        metricRadio.addEventListener('change', updateUnits);
        imperialRadio.addEventListener('change', updateUnits);
        
        // Initialize with correct units
        updateUnits();
    });
</script>
```

## Step 2: Update Analysis Results Template

Edit `MyGeneticsApp/templates/tailwind_results.html` to focus only on displaying results:

```html
<!-- Remove any form inputs and only leave result display sections -->
<div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6 text-center">Your Body Analysis Results</h1>
    
    <!-- User Info Summary -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-6">
        <div class="flex flex-col md:flex-row items-center justify-between">
            <div class="mb-4 md:mb-0">
                <h2 class="text-xl font-semibold mb-4">Your Information</h2>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <span class="block text-sm font-medium text-gray-500">Height</span>
                        <span class="block text-lg font-semibold">{{ user_info.height }} {{ 'cm' if measurement_system == 'metric' else 'in' }}</span>
                    </div>
                    <div>
                        <span class="block text-sm font-medium text-gray-500">Weight</span>
                        <span class="block text-lg font-semibold">{{ user_info.weight }} {{ 'kg' if measurement_system == 'metric' else 'lbs' }}</span>
                    </div>
                    <div>
                        <span class="block text-sm font-medium text-gray-500">Gender</span>
                        <span class="block text-lg font-semibold capitalize">{{ user_info.gender }}</span>
                    </div>
                    <div>
                        <span class="block text-sm font-medium text-gray-500">Experience</span>
                        <span class="block text-lg font-semibold capitalize">{{ user_info.experience }}</span>
                    </div>
                </div>
            </div>
            
            {% if image_data %}
            <div class="border rounded-lg overflow-hidden h-64 w-48">
                <img src="data:image/jpeg;base64,{{ image_data }}" alt="Your uploaded photo" class="h-full w-full object-cover">
            </div>
            {% endif %}
        </div>
    </div>
    
    <!-- AI Measurement Estimation Notice -->
    <div class="bg-blue-50 border-l-4 border-blue-400 p-4 mb-6">
        <div class="flex">
            <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-blue-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                </svg>
            </div>
            <div class="ml-3">
                <p class="text-sm text-blue-700">
                    <span class="font-medium">AI-Enhanced Analysis:</span> Your body measurements have been automatically estimated from your photo using computer vision technology.
                </p>
            </div>
        </div>
    </div>
    
    <!-- Existing results content goes here -->
    
    <!-- Genetic Traits Section -->
    <!-- ... keep your existing traits section ... -->
    
    <!-- Bodybuilding Metrics Section -->
    {% if bodybuilding and not bodybuilding.error %}
    <div class="mt-10">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">Bodybuilding & Physique Analysis</h2>
        
        <!-- Body Composition Card -->
        {% if bodybuilding.body_composition %}
        <!-- ... keep your existing body composition section ... -->
        {% endif %}
        
        <!-- Keep other bodybuilding metrics sections -->
        <!-- ... -->
    </div>
    {% endif %}
</div>
```

## Step 3: Update Routes in app.py

Edit the `app.py` file to update the routes:

```python
# Make sure these imports are at the top
from utils.measurement_estimator import BodyMeasurementEstimator
from utils.body_composition import BodyCompositionAnalyzer
from utils.bodybuilding_metrics import complete_bodybuilding_analysis
import base64

# Initialize the estimators
measurement_estimator = BodyMeasurementEstimator()
composition_analyzer = BodyCompositionAnalyzer()

@app.route('/')
def home():
    """Home page with body analysis form"""
    return render_template('tailwind_home.html')

@app.route('/analyze', methods=['POST'])
def analyze():
    """Process the uploaded photo and form data, then display results"""
    if request.method == 'POST':
        try:
            # Extract form data
            height = request.form.get('height', type=float)
            weight = request.form.get('weight', type=float)
            gender = request.form.get('gender', 'male')
            experience = request.form.get('experience', 'beginner')
            measurement_system = request.form.get('measurement_system', 'metric')
            
            # Convert to metric if needed for internal calculations
            if measurement_system == 'imperial':
                height_cm = height * 2.54 if height else None
                weight_kg = weight * 0.453592 if weight else None
            else:
                height_cm = height
                weight_kg = weight
            
            # Process uploaded image
            image_data = None
            if 'image' in request.files:
                file = request.files['image']
                if file and file.filename != '' and allowed_file(file.filename):
                    # Save the file temporarily
                    filename = secure_filename(file.filename)
                    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                    file.save(filepath)
                    
                    # Read the image for display
                    with open(filepath, "rb") as image_file:
                        image_data = base64.b64encode(image_file.read()).decode('utf-8')
                    
                    # Estimate body measurements from the image
                    estimated_measurements = measurement_estimator.estimate_measurements(
                        image_data, height_cm, weight_kg, gender, experience
                    )
                    
                    # Analyze body composition
                    body_composition = composition_analyzer.analyze_composition(
                        height_cm, weight_kg, gender, estimated_measurements
                    )
                    
                    # Generate bodybuilding analysis
                    user_data = {
                        "height_cm": height_cm,
                        "weight_kg": weight_kg,
                        "gender": gender,
                        "experience": experience
                    }
                    
                    # Add estimated measurements to user data
                    if estimated_measurements:
                        user_data.update(estimated_measurements)
                    
                    # Complete bodybuilding analysis
                    bodybuilding_analysis = complete_bodybuilding_analysis(user_data)
                    
                    # Add body composition to bodybuilding analysis
                    if bodybuilding_analysis and body_composition:
                        bodybuilding_analysis['body_composition'] = body_composition
                    
                    # Calculate traits
                    traits = analyze_body_traits(height_cm, weight_kg, gender, estimated_measurements)
                    
                    # Generate recommendations
                    recommendations = generate_recommendations(traits)
                    
                    # Clean up the temporary file
                    if os.path.exists(filepath):
                        os.remove(filepath)
                    
                    # Create analysis record in database
                    analysis = Analysis(
                        user_id=current_user.id if current_user.is_authenticated else None,
                        analysis_type="body",
                        analysis_data=json.dumps({
                            "traits": traits,
                            "bodybuilding": bodybuilding_analysis,
                            "recommendations": recommendations
                        }),
                        created_at=datetime.now()
                    )
                    db.session.add(analysis)
                    db.session.commit()
                    
                    # Display results
                    return render_template(
                        'tailwind_results.html',
                        analysis_id=analysis.id,
                        traits=traits,
                        recommendations=recommendations,
                        user_info={
                            'height': height,
                            'weight': weight,
                            'gender': gender,
                            'experience': experience
                        },
                        image_data=image_data,
                        format_value=format_trait_value,
                        is_3d_scan=False,
                        bodybuilding=bodybuilding_analysis,
                        estimated_measurements=estimated_measurements,
                        measurement_system=measurement_system
                    )
            
            # Handle case where no image was uploaded
            flash("Please upload an image for analysis.", "error")
            return redirect(url_for('home'))
            
        except Exception as e:
            logger.error(f"Error in analysis: {str(e)}")
            flash(f"Error analyzing image: {str(e)}", "error")
            return redirect(url_for('home'))
    
    # GET requests are redirected to the home page
    return redirect(url_for('home'))

# Remove the bodybuilding_analysis route if it exists
# @app.route('/bodybuilding_analysis')
# def bodybuilding_analysis():
#     ...
```

## Step 4: Update Navigation in base.html

Edit `MyGeneticsApp/templates/base.html` to remove the Bodybuilding Metrics navigation link:

```html
<!-- Update the navigation menu -->
<nav class="bg-gray-800">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between h-16">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <a href="{{ url_for('home') }}" class="flex items-center">
                        <img class="h-8 w-auto" src="{{ url_for('static', filename='img/logo.svg') }}" alt="MyGenetics">
                        <span class="ml-2 text-white font-bold text-lg">MyGenetics</span>
                    </a>
                </div>
                <div class="hidden md:block">
                    <div class="ml-10 flex items-baseline space-x-4">
                        <a href="{{ url_for('home') }}" class="text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium">Home</a>
                        <a href="{{ url_for('body_scan') }}" class="text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium">3D Scanning</a>
                        <!-- Remove Bodybuilding Metrics link -->
                        <a href="{{ url_for('education') }}" class="text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium">Learn</a>
                    </div>
                </div>
            </div>
            <!-- Keep the authentication links -->
        </div>
    </div>
</nav>
```

## Step 5: Implementation Notes for Replit

1. Make sure you have installed all required dependencies:
```bash
pip install opencv-python tensorflow mediapipe scikit-learn pillow flask-cors numpy
```

2. Ensure you've created the measurement estimator and body composition analyzer modules as per the previous instructions.

3. The workflow is now:
   - User goes to Home page
   - Enters basic information and uploads photo
   - Submits form which processes the image and generates measurements
   - User is redirected to Results page showing all analysis

4. If the user is not logged in, make sure to handle the analysis record creation appropriately (either skip it or create an anonymous record).

5. Test the workflow to ensure data flows properly from the Home page to the Results page.

This implementation streamlines the user experience by having all data collection on the Home page and showing comprehensive results on the Analysis page, eliminating the separate Bodybuilding Metrics page entirely.
