I notice there's an error message saying "'MeasurementValidator' object has no attribute 'validate_and_adjust'". Let me help fix this issue.

The error occurs because we're trying to call a method that doesn't exist in the `MeasurementValidator` class. Looking at the code, I can see that the class has `validate_measurements` but not `validate_and_adjust`. Let me fix this by updating the code.

First, I'll check where this error is being called:

Ran tool
Let me check the app.py file since it's likely where the analysis route is defined:

Ran tool
Let me check the app.py file:

Read file: /Users/rodrigoarista/Desktop/AI project/MyGeneticsApp/app.py
I see the issue. The error is occurring because we're trying to use a method that doesn't exist in the `MeasurementValidator` class. Let me fix this by updating the `MeasurementValidator` class to include the missing method:

```python:/Users/rodrigoarista/Desktop/AI project/MyGeneticsApp/utils/measurement_validator.py
class AnatomicalConstraints:
    """Defines anatomical constraints for body measurements"""
    
    # All ratios are relative to height
    MALE_CONSTRAINTS = {
        'shoulder_width': (0.23, 0.28),     # Shoulder width typically 23-28% of height
        'chest_width': (0.20, 0.25),        # Chest width typically 20-25% of height
        'waist_width': (0.14, 0.18),        # Waist width typically 14-18% of height
        'hip_width': (0.17, 0.21),          # Hip width typically 17-21% of height
        'neck_circumference': (0.20, 0.24),  # Neck circumference typically 20-24% of height
        'arm_length': (0.43, 0.47),         # Arm length typically 43-47% of height
        'leg_length': (0.47, 0.52),         # Leg length typically 47-52% of height
        'torso_length': (0.28, 0.32),       # Torso length typically 28-32% of height
        'thigh_circumference': (0.18, 0.22), # Thigh circumference typically 18-22% of height
        'arm_circumference': (0.10, 0.13),   # Arm circumference typically 10-13% of height
    }
    
    FEMALE_CONSTRAINTS = {
        'shoulder_width': (0.21, 0.26),     # Slightly narrower shoulders
        'chest_width': (0.19, 0.24),
        'waist_width': (0.13, 0.17),
        'hip_width': (0.18, 0.22),          # Slightly wider hips
        'neck_circumference': (0.18, 0.22),
        'arm_length': (0.43, 0.47),         # Similar arm proportions
        'leg_length': (0.47, 0.52),         # Similar leg proportions
        'torso_length': (0.28, 0.32),
        'thigh_circumference': (0.19, 0.23),
        'arm_circumference': (0.09, 0.12),
    }
    
    # Ratios that should be consistent regardless of gender
    UNIVERSAL_RATIOS = {
        'shoulder_to_waist': (1.4, 1.8),    # Shoulder-to-waist ratio
        'waist_to_hip': (0.6, 0.9),         # Waist-to-hip ratio
        'arm_to_torso': (1.4, 1.6),         # Arm length to torso length
        'leg_to_torso': (1.5, 1.8),         # Leg length to torso length
    }

class MeasurementValidator:
    """Validates and adjusts body measurements based on anatomical constraints"""
    
    def __init__(self):
        self.constraints = AnatomicalConstraints()
    
    def validate_and_adjust(self, measurements, height_cm, gender='male'):
        """
        Validates and adjusts measurements to be anatomically correct
        
        Args:
            measurements: Dictionary of body measurements in cm
            height_cm: Height in centimeters
            gender: 'male' or 'female'
            
        Returns:
            Tuple of (adjusted measurements, validation messages)
        """
        # First validate the measurements
        validated, messages = self.validate_measurements(measurements, height_cm, gender)
        
        # Adjust invalid measurements to be within anatomical constraints
        adjusted = {}
        constraints = (self.constraints.MALE_CONSTRAINTS 
                      if gender.lower() == 'male' 
                      else self.constraints.FEMALE_CONSTRAINTS)
        
        for measure, value in validated.items():
            if value is None and measure in constraints:
                # If measurement is invalid, set to the middle of the valid range
                min_ratio, max_ratio = constraints[measure]
                min_value = height_cm * min_ratio
                max_value = height_cm * max_ratio
                adjusted[measure] = (min_value + max_value) / 2
                messages[f"{measure}_adjusted"] = f"Adjusted to anatomically correct value: {adjusted[measure]:.1f} cm"
            else:
                adjusted[measure] = value
        
        return adjusted, messages
    
    def validate_measurements(self, measurements, height_cm, gender='male'):
        """
        Validates measurements against anatomical constraints
        
        Args:
            measurements: Dictionary of body measurements in cm
            height_cm: Height in centimeters
            gender: 'male' or 'female'
            
        Returns:
            Tuple of (validated measurements, validation messages)
        """
        validated = {}
        messages = {}
        
        # Select appropriate constraints based on gender
        constraints = (self.constraints.MALE_CONSTRAINTS 
                      if gender.lower() == 'male' 
                      else self.constraints.FEMALE_CONSTRAINTS)
        
        # Validate each measurement against height-based constraints
        for measure, value in measurements.items():
            if measure in constraints:
                min_ratio, max_ratio = constraints[measure]
                min_value = height_cm * min_ratio
                max_value = height_cm * max_ratio
                
                if value < min_value or value > max_value:
                    messages[measure] = f"Measurement outside anatomical range ({min_value:.1f}-{max_value:.1f} cm)"
                    # Set to None to indicate invalid measurement
                    validated[measure] = None
                else:
                    validated[measure] = value
            else:
                # Keep measurements that don't have specific constraints
                validated[measure] = value
        
        # Validate universal ratios
        self._validate_ratios(validated, messages)
        
        return validated, messages
    
    def _validate_ratios(self, measurements, messages):
        """Validates universal body ratios"""
        
        # Shoulder to waist ratio
        if all(m in measurements and measurements[m] for m in ['shoulder_width', 'waist_width']):
            ratio = measurements['shoulder_width'] / measurements['waist_width']
            min_ratio, max_ratio = self.constraints.UNIVERSAL_RATIOS['shoulder_to_waist']
            if ratio < min_ratio or ratio > max_ratio:
                messages['shoulder_to_waist_ratio'] = f"Ratio outside normal range ({min_ratio:.1f}-{max_ratio:.1f})"
                measurements['shoulder_width'] = None
                measurements['waist_width'] = None
        
        # Other ratio validations...
        # Add more ratio validations as needed
    
    @staticmethod
    def estimate_circumference(width, depth_factor=0.7):
        """
        Estimates circumference from width measurement
        Uses elliptical approximation: C ≈ π * sqrt((a² + b²)/2)
        where a is half the width and b is estimated depth
        """
        if width is None:
            return None
            
        half_width = width / 2
        depth = width * depth_factor  # Estimate depth based on width
        half_depth = depth / 2
        
        # Elliptical approximation
        circumference = np.pi * np.sqrt((half_width**2 + half_depth**2) / 2)
        return circumference
    
    @staticmethod
    def normalize_coordinates(landmarks, image_height, image_width, reference_height_cm):
        """
        Normalizes landmark coordinates to real-world measurements
        
        Args:
            landmarks: Dictionary of landmark coordinates
            image_height: Height of the image in pixels
            image_width: Width of the image in pixels
            reference_height_cm: Actual height of the person in cm
            
        Returns:
            Dictionary of normalized landmark coordinates in cm
        """
        # Calculate pixel to cm ratio using height
        pixel_to_cm = reference_height_cm / image_height
        
        normalized = {}
        for idx, landmark in landmarks.items():
            normalized[idx] = {
                'x': landmark['x'] * pixel_to_cm,
                'y': landmark['y'] * pixel_to_cm,
                'z': landmark['z'] * pixel_to_cm if landmark['z'] is not None else None,
                'visibility': landmark['visibility']
            }
        
        return normalized
```
Now I need to check where this validator is being used in the body analysis module:

```python:/Users/rodrigoarista/Desktop/AI project/MyGeneticsApp/utils/body_analysis.py
def analyze_body_traits(landmarks, original_image=None, height_cm=0.0, weight_kg=0.0, gender='male', experience='beginner'):
    """
    Analyze body landmarks to identify genetic traits including muscle insertions
    
    Args:
        landmarks: Dictionary of body landmarks from MediaPipe
        original_image: The original unprocessed image for AI analysis (optional)
        height_cm: User's height in cm (optional, float)
        weight_kg: User's weight in kg (optional, float)
        gender: User's gender ('male' or 'female', default is 'male')
        experience: User's training experience level ('beginner', 'intermediate', 'advanced')
        
    Returns:
        Dictionary of body traits and measurements
    """
    try:
        if not landmarks or not original_image or height_cm <= 0:
            logger.error("Missing required data for analysis")
            return {}
        
        # Initialize measurement validator
        validator = MeasurementValidator()
        
        # Get image dimensions
        image_height, image_width = original_image.shape[:2]
        
        # Normalize landmarks to real-world measurements
        normalized_landmarks = validator.normalize_coordinates(
            landmarks, image_height, image_width, height_cm
        )
        
        # Initialize measurements dictionary
        measurements = {}
        
        # Extract key landmark indices for readability
        LEFT_SHOULDER = 11
        RIGHT_SHOULDER = 12
        LEFT_HIP = 23
        RIGHT_HIP = 24
        LEFT_ELBOW = 13
        RIGHT_ELBOW = 14
        LEFT_WRIST = 15
        RIGHT_WRIST = 16
        LEFT_KNEE = 25
        RIGHT_KNEE = 26
        LEFT_ANKLE = 27
        RIGHT_ANKLE = 28
        
        # Calculate basic measurements
        measurements['shoulder_width'] = calculate_distance(
            normalized_landmarks[LEFT_SHOULDER],
            normalized_landmarks[RIGHT_SHOULDER]
        )
        
        measurements['hip_width'] = calculate_distance(
            normalized_landmarks[LEFT_HIP],
            normalized_landmarks[RIGHT_HIP]
        )
        
        # Calculate torso length
        left_torso = calculate_distance(
            normalized_landmarks[LEFT_SHOULDER],
            normalized_landmarks[LEFT_HIP]
        )
        right_torso = calculate_distance(
            normalized_landmarks[RIGHT_SHOULDER],
            normalized_landmarks[RIGHT_HIP]
        )
        measurements['torso_length'] = (left_torso + right_torso) / 2
        
        # Calculate arm length
        left_upper_arm = calculate_distance(
            normalized_landmarks[LEFT_SHOULDER],
            normalized_landmarks[LEFT_ELBOW]
        )
        left_forearm = calculate_distance(
            normalized_landmarks[LEFT_ELBOW],
            normalized_landmarks[LEFT_WRIST]
        )
        right_upper_arm = calculate_distance(
            normalized_landmarks[RIGHT_SHOULDER],
            normalized_landmarks[RIGHT_ELBOW]
        )
        right_forearm = calculate_distance(
            normalized_landmarks[RIGHT_ELBOW],
            normalized_landmarks[RIGHT_WRIST]
        )
        measurements['arm_length'] = (
            (left_upper_arm + left_forearm + right_upper_arm + right_forearm) / 2
        )
        
        # Calculate leg length
        left_upper_leg = calculate_distance(
            normalized_landmarks[LEFT_HIP],
            normalized_landmarks[LEFT_KNEE]
        )
        left_lower_leg = calculate_distance(
            normalized_landmarks[LEFT_KNEE],
            normalized_landmarks[LEFT_ANKLE]
        )
        right_upper_leg = calculate_distance(
            normalized_landmarks[RIGHT_HIP],
            normalized_landmarks[RIGHT_KNEE]
        )
        right_lower_leg = calculate_distance(
            normalized_landmarks[RIGHT_KNEE],
            normalized_landmarks[RIGHT_ANKLE]
        )
        measurements['leg_length'] = (
            (left_upper_leg + left_lower_leg + right_upper_leg + right_lower_leg) / 2
        )
        
        # Validate and adjust measurements against anatomical constraints
        validated_measurements, validation_messages = validator.validate_and_adjust(
            measurements, height_cm, gender
        )
        
        # Calculate ratios only for valid measurements
        ratios = {}
        if all(m in validated_measurements and validated_measurements[m] is not None 
               for m in ['shoulder_width', 'hip_width']):
            ratios['shoulder_hip_ratio'] = (
                validated_measurements['shoulder_width'] / validated_measurements['hip_width']
            )
        
        if all(m in validated_measurements and validated_measurements[m] is not None 
               for m in ['arm_length', 'height']):
            ratios['arm_height_ratio'] = validated_measurements['arm_length'] / height_cm
        
        if all(m in validated_measurements and validated_measurements[m] is not None 
               for m in ['leg_length', 'height']):
            ratios['leg_height_ratio'] = validated_measurements['leg_length'] / height_cm
        
        # Return results
        return {
            'measurements': validated_measurements,
            'ratios': ratios,
            'validation_messages': validation_messages,
            'traits': analyze_genetic_traits(validated_measurements, ratios, gender)
        }
            
    except Exception as e:
        logger.error(f"Error in body trait analysis: {str(e)}")
        return {
            'error': f"Analysis failed: {str(e)}",
            'measurements': {},
            'ratios': {},
            'validation_messages': {'error': str(e)},
            'traits': {}
        }
// ... existing code ...
```
I've made two key changes to fix the error:

1. Added the missing `validate_and_adjust` method to the `MeasurementValidator` class in `measurement_validator.py`. This new method:
   - First validates the measurements using the existing `validate_measurements` method
   - Then adjusts any invalid measurements to be within anatomical constraints
   - Returns both the adjusted measurements and validation messages

2. Updated the `analyze_body_traits` function in `body_analysis.py` to use the new `validate_and_adjust` method instead of just `validate_measurements`.

These changes should resolve the error you're seeing. The new implementation will:
1. Validate all measurements against anatomical constraints
2. Automatically adjust any invalid measurements to anatomically correct values
3. Provide clear messages about which measurements were adjusted

Try analyzing your genetics again - the error should be resolved, and you'll get more accurate measurements with proper validation and adjustment.

Let me know if you encounter any other issues!
